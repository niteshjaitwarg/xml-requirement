
IN-HYD-10N-H06
11:48
So we're good. Next we'll start with the XML, ok? So Rahul, this is for you. So till now what we have done is we are in assumption that we'll get, we'll get our JSON access.

IN-HYD-10N-H06
12:08
This one, I'll show you this one 1st. So we thought like till now we are going to get this get like this XML template, ok? Based on that, we started working on this XML complex one, ok?

Hidau, Rahul
12:21
Yes sir.

IN-HYD-10N-H06
12:26
So we thought like we'll get XML template like this and based on the using using this, we have to process the data now. So for this so now the thing here is we need to generate this JSON structure from the access team.

IN-HYD-10N-H06
12:44
That is our main motive. So means whenever is there any like there is a e.g. this is a contact between the producer and consumer. Okay. Producer any web service technology, that's the resource web service technology. So web services will.

IN-HYD-10N-H06
13:08
So Json will have open a like open API kind of thing like swagger, whereas XML will have access this, ok? So that is a contract, what data we need to send. So what is the file name field names? What is the structure of those field names? Okay, same way for the for us they'll give you access simple.

Hidau, Rahul
13:32
Okay.

IN-HYD-10N-H06
13:33
So the access to would be how it will be like yeah this is accessing I'll share you this file ok.

Hidau, Rahul
14:03
Okay.

IN-HYD-10N-H06
14:05
Assume this is a sample access thing e.g. for XML, ok? This one is automated thing, ok? So if you have anything right make a note of points, ok? So this is much bigger, ok? So it is having different, different component.

IN-HYD-10N-H06
14:23
Next. E.g., if you're doing this, e.g., this is the start element, work effective stack is the start element for the XML. Yeah.

Hidau, Rahul
14:40
See what's the.

IN-HYD-10N-H06
14:42
Okay, so there is so in the sequence what you are going to see is summary summary of these fields. So this is a summary of these Fields summary of these fields, ok? So similarly after summary what we have we have worker type.

Hidau, Rahul
15:06
So.

IN-HYD-10N-H06
15:14
Yeah, worker type name is worker. So it is created a tag with worker. So like that in this worker type, this is the worker type object, it again it will have summary and effective changes. This is these two sections we have, right? So worker summary, again effect.

Hidau, Rahul
15:31
To change that before like.

IN-HYD-10N-H06
15:34
It's a complex stuff and it is going to like a end times next time like list objectives. We can get any number of effective changes.

Hidau, Rahul
15:46
Okay. Could you please could you please come again and.

IN-HYD-10N-H06
15:53
List.

IN-HYD-10N-H06
15:55
Given from list list object. See mean and max is one means it's a simple object, if it is unloaded means list object basically. If I say worker summary, e.g., this is the one, so they didn't mention max access means by default it will have only one.

IN-HYD-10N-H06
16:15
One sections. Like this work list like summary picky summary, whereas, these effective changes, right? If you see effective changes, sequence zero they mentioned sequence they mentioned, like that we will get n sequences. So for this particular worker ok understo.

Hidau, Rahul
16:36
This is.

IN-HYD-10N-H06
16:38
Yeah. So this is the employee ID, this is 2nd worker employee. So what are the changes it is having, ok change means. So firstly our primary thing is we need to, e.g., in UA you will have upload script.

IN-HYD-10N-H06
16:55
Okay, so from there they'll push the to us. So we have to analyze the ok we have to again we'll reply back to the UA. So I'll explain I'll explain the flow now. So in the UA, how it will be.

IN-HYD-10N-H06
17:14
You need to display a structure, these structure of those objects. These structure of objects means, e.g., let's take example of this one, ok? So what it would be 1st is the change, right? So how it will be in the UA?

IN-HYD-10N-H06
17:31
So e.g., this is a start element. Here they'll have like one checkbox and expandable thing. One checkbox means I'll show it in the diagram manner, ok.

IN-HYD-10N-H06
17:47
Okay.

Hidau, Rahul
17:53
Okay.

IN-HYD-10N-H06
17:59
Yeah, this is the example you see, ok? You're seeing right this one.

Hidau, Rahul
18:05
Yeah, yeah.

IN-HYD-10N-H06
18:13
So you're seeing this one, right? See node zero like node zero of 110 like assume this node zero is our this one workers. So either we'll have like here we have this check option along with the expandable option like this it is going to represent. So either they can select all, they can they might set whatever objects they want, ok? So from like this diagram, based on this diagram.

IN-HYD-10N-H06
18:40
So workers so what we will do, we'll 1st process all access the we'll understand the we will give this three structures to them. UA, so from UA or whatever, they will display.

IN-HYD-10N-H06
18:55
So once after display, what is the job from user will select what other because this XSD does not require all elements like for the two process for us. Selection they'll do it like user will do it manually. So because this access is having around say 3000 lines of like it is having more than like kind of thing, like it's a very big big access thing. I'll see if i if I will minimizing all those things.

Hidau, Rahul
19:25
Right? Yes.

IN-HYD-10N-H06
19:32
Yeah. So by understanding this we need to generate this node status, ok? So once node generated UA will like will from UA user will select this whatever node he requests.

IN-HYD-10N-H06
19:48
Okay, so what are the object? If they don't want e.g. this node two zero of node two, they'll unselect it. So like this whatever selection they're doing, so same way once after these changes are done, so they will send back to the updated next year success.

Hidau, Rahul
20:05
Okay.

IN-HYD-10N-H06
20:07
Next they'll do do next. Okay, so once after we are getting finalized like object structures like so we need to generate now this, this one like this one this sample json structure is.

Hidau, Rahul
20:23
Get ready?

IN-HYD-10N-H06
20:25
Yes, so this one we need to generate from programmatically. No, before that, 1st we'll insert object like column relations in DB. We'll get UIDs of all column relations. After that we'll, we'll use, we'll create this template and.

IN-HYD-10N-H06
20:43
We'll save like we'll save in email, We'll let UA, it depends upon the selected notes, right? So it depends on selected notes basically this has to be generated, ok?

Hidau, Rahul
20:54
Okay so.

IN-HYD-10N-H06
20:59
So once this XML is generated, XML is generated like this is generated. So what will happen in UI automatically like.

IN-HYD-10N-H06
21:09
They're going to populate this XML structure is right there right this one this XML structures. Let me open the XML.

IN-HYD-10N-H06
21:24
Okay. So this is the structure, right? See, this is the output structure, but same way they're going to generate the input structure, like input structure here is red.

IN-HYD-10N-H06
21:43
So for the text files how we are doing, same way they're going to create a structure in this area, like how we are doing right? Any here we are getting right?

IN-HYD-10N-H06
22:02
So this is the one and one more thing here is one more like this is a plain post two scenario. Like user will come, user will upload access D. So We'll those elements from the access D.

IN-HYD-10N-H06
22:16
And we'll create an extra structure like this structure this structure, so once user will select whatever notes he required for this from the structures, ok? And they'll do next. So once doing next, we are going to generate this XML Json and we'll we are going to generate column relations because we need to have.

Hidau, Rahul
22:38
This is required, right? For which.

IN-HYD-10N-H06
22:40
Yeah. So we will generate these UIDs, we'll insert it, we'll 1st we'll generate column regions, we'll it in DB. Once we got this UIDs, we'll map the two IDs with this structure and we'll save it to the DB. Okay, what are the tables I'll tell you, ok? But this is a high level understanding of the requirement, ok? So step two. Step one is completed like once after configuration generated, you will display.

Hidau, Rahul
23:08
Whatever output files. Yeah yeah so could you please repeat one of the step one in the sort manner?

IN-HYD-10N-H06
23:20
Step one means user will come to UA, ok? Okay. So in the UI, e.g., if currently what we are doing, how we are importing anything, we are doing add new files, right? And here we are.

IN-HYD-10N-H06
23:35
Here now we'll give XML. Once we give XML, we'll have some upload option here. Okay ok maybe this pop up will be some more than this one. Once user has uploaded XSD, so we have to provide one API to API. So they.

IN-HYD-10N-H06
23:57
So we have to understand that processes the create these next structures here, ok? Once this next we will display the same structures in UI, means we need to generate this structure. We will reply back to them. Okay, understoo.

Hidau, Rahul
24:16
Today so.

IN-HYD-10N-H06
24:19
Like this so and here from here user will select whatever notes he want. So if they don't want this zero two.

Hidau, Rahul
24:30
So it will be unchecked.

IN-HYD-10N-H06
24:32
Uncheck this one, they'll check yeah they'll check and uncheck basically. Yeah. Okay, that is the thing once node, so what people will do is they'll share this node with us like whatever the updated note, right? They'll give it with us they'll send the request as the next next navigation, e.g..

IN-HYD-10N-H06
24:54
Upload file next day three, next Select the notes. Select the notes next, so on we'll get the notes. So once after getting the notes, we need to create a column relation objects, list of column relation, we'll need to save it in the DB, ok? So once you save it in DB, we'll get UIDs.

IN-HYD-10N-H06
25:13
Okay, so once we get the UIDs, so we need to generate this JSON structures for the XML. So from here we have already started working on this code.

Hidau, Rahul
25:22
Good ok.

IN-HYD-10N-H06
25:25
Okay, so till now till now you worked on like a runtime data thing. Now we need, we need to work on configuration data thing. See what is the configuration you have to build. So, so whatever code you have written dollar that doesn't like went away in a waste manner, like it is going to use.

Hidau, Rahul
25:42
Definitely. Okay, understood, right? So he selected that will be mapping to.

IN-HYD-10N-H06
25:49
With the validations transformation see whatever is everything is independent component more than that. So don't rely on the configurations. Yeah, but that should be everything will control with configurations, that's it.

IN-HYD-10N-H06
26:08
So that's why if we are able to create data set means rest part will taken care by the rest of things. So validation rules understands only data sets. Transformation rules understands only data sets. Output file rules understands only data sets. Data set depends upon this. Data sets we are creating on this configuration requirement so.

IN-HYD-10N-H06
26:29
It's like a independent box. You wanted to remove one box, you can remove it. You wanted to add one more box, you can add it, like box manner. Like new trend came, right? There is a mobile with the attached to the box. No, NO. New technology come.

IN-HYD-10N-H06
26:58
Models like this one, correct? Google has given this one.

IN-HYD-10N-H06
27:06
Yeah, ok. So this is the mobile technology, new technology which has introduced recently. So if you wanted to upgrade processor, you will just unplug this processor thing and you'll you'll plug high processor. If you want to update RAM, you will unplug that RAM block. You'll put put that new, you wanted to update hard disk, you will remove that block like everything if you see.

Hidau, Rahul
27:31
Here Wi Fi, all these modules.

IN-HYD-10N-H06
27:35
So everything is detachable everything like this. So this is a new trend like a new technology of mobile blocks things. So they have a base platform, anything with can be replaced like same same. We don't give other than that. So this is the access event.

IN-HYD-10N-H06
28:00
Step two is now step two is updates to the updates to the means e.g. for today's requirement they have only in a schema, they want only two sections or three sections Next maybe. Tomorrow, they want to add few more sections to the structure. Other they want to remove when there is going to uplift the update is happening on the.

IN-HYD-10N-H06
28:27
Input structures basically, ok? So again, what we'll do user will upload the JSON structures this not Json XSD, user will upload the access D again same same thing next we same code. We'll like process the XSD.

IN-HYD-10N-H06
28:47
So what will happen is while update scenarios, we'll display the table back to them which are selected and which are unselected. Because we have already existing configuration with us. Yes? So now what user will do, user can do.

IN-HYD-10N-H06
29:03
Either he can add few more sections, few more objects or he can delete few more objects. So what will happen, there is like changes happening in the structure like whatever processing structure. So what we have to do here is while taking the new structure, like updating scenario.

IN-HYD-10N-H06
29:20
Either we need to have a such bullety, whether is there any deletion has happening field deletion is happening or the field deletion. So user is uploaded the access day again, so we have displayed that what are the selected areas.

IN-HYD-10N-H06
29:38
So the he might add few more few more selected areas or he can remove a few selected areas from the existing configuration. So now what the scenario here is, so by understanding existing because update scenario, new things come. So two things are there now means existing structure.

IN-HYD-10N-H06
29:58
New structure. We need to identify differences. If there any deletion is happening at the column level or any structure level, we have to delete. Is there any addition is happening? We need to add. That is the one thing. Otherwise, if that is looks very complex, we'll remove all structures we'll need all structures.

IN-HYD-10N-H06
30:18
Okay, we'll recreate new structures but but problem here is how we are going to handle the validation and transformation rules. Because if you are going to delete all those structures, we are going to lose the transformation validations. That is the 1st trigger point. So you guys might ask like.

IN-HYD-10N-H06
30:35
We can we will simply delete and we'll like reinsert all those structures. But the point here is we are going to lose the validation and transformations of that particular particular column column, ok? So we need to have a such mechanism is mechanism. So we need to compare those existing and new updated structure. If there any any deletions are happening, we only delete those fields, ok? If any new things are coming, we'll add.

Hidau, Rahul
31:05
This one.

IN-HYD-10N-H06
31:11
I have done the process selections and all for ABCD, ABD. E.g., I have selected A and D have inserted ABC ABCD have ABCD I reverted back where I got a table I mean the notes example, so I selected A and D So I have done the.

IN-HYD-10N-H06
31:28
Process. So, e.g., I need to, I want to select again bnc. So the 60 which is 60 will be imported imported or see that that can we don't know because as as goes under there maybe chance of having few more fields added to the SSD.

IN-HYD-10N-H06
31:47
Okay, NO one will predict e.g. user requirement user requirement based on new features. E.g., this developing new features definitely they'll import that so as 2nd step, as you have mentioned.

IN-HYD-10N-H06
32:08
Adding and selecting of a new fields require new S 60. Editing of present fields will have the same will use the same 60. See, either they can use same access D ok they can use updated XSD. Okay both they can use. See existing you have ten sticks like ten complex objects. Out of ten.

IN-HYD-10N-H06
32:32
You have only three. Tomorrow, you got a requirement, add few more, two, ok? So what you're done again you uploaded the same access d. So after year, what will happen this access is updated with the new version 2.2, ok. So there are few more attributes, like few more additional complex structures. So again we'll import, what will happen? We'll compare both, whatever existing is that we'll check those things.

IN-HYD-10N-H06
32:58
Whatever not there, we'll display with the additional things. So user might select new things again they'll do. So what will happen means we need to have a mechanism to analyze with our existing new structure, ok. So based on that we will decide what what call in relations we have to insert or delete.

IN-HYD-10N-H06
33:16
So anyway for the deletion thing, simple, it's simple we have to update with the status delete, we have a column with the status. If you update the status as a delete, it will solve delete from from the process, ok? So that is one like a case we have like reusing So directly you can send list of columns for update.

IN-HYD-10N-H06
33:36
So once you start like delete AP you hit the once you hit the delete AP, so it will do also that is API is there already. Okay. So step one step two defense is this. This is a step one step two difference. Okay. Understood.

Hidau, Rahul
33:50
No problem.

IN-HYD-10N-H06
33:52
Yeah, yeah, yeah.

Hidau, Rahul
33:54
So challenging rate? Yeah, it's it's very challenging but I will go go through once the recording as well after then if I got any confusion so I will be connecting with.

IN-HYD-10N-H06
34:08
Okay this is the initial discussion right this see 1st thing we'll get.

IN-HYD-10N-H06
34:14
More I'll try to give enough time. Don't worry, forget about timelines, ok? Timelines is my problem ok? Don't worry about timelines and don't think that if I'm saying means you don't like don't do keep on dragging things, ok?

Hidau, Rahul
34:29
Okay.

IN-HYD-10N-H06
34:31
But.

Hidau, Rahul
34:33
Do you know, don't worry. Don't worry.

IN-HYD-10N-H06
34:37
Don't don't worry, don't worry. I know what is the complexity of the things. So based on that I'll give time you time for you guys. Even I'll keep buffer on even I know, I know the things. So, but like.

Hidau, Rahul
34:53
We both.

IN-HYD-10N-H06
34:59
If you guys are feeling hard like somewhere you are stucking, right? Immediately.

Hidau, Rahul
35:03
You can reach out to me. Okay.

IN-HYD-10N-H06
35:04
Okay 1st try to analyze from your end if still it is not able to figure out then because I nowadays said I'm busy with a lot of other things, ok? Not only other multiple things in my in my pocket, ok? So I have pulling you time for you guys is means very much difficult for me. So try to understand from my side also still I will be available for you guys, but understand from my side also.

IN-HYD-10N-H06
35:33
Because I take example of texting. So I try to give inputs for you guys, it's like ok not for one. So see you guys has developed one approach that is ok, but.

IN-HYD-10N-H06
35:49
That is not like, it has to be improved a lot. I believe like, so try to because we are not doing regular programming kind of thing before the interview also I told you guys same thing. So we are not going to do regular things. That's for sure. Then you have to prepare like that so.

IN-HYD-10N-H06
36:07
See, from here, you definitely you are going to learn new things and will go. That is the, that is the thing I can assure you. But while learning rate, make your hands dirty. Means Kitna significantly.

IN-HYD-10N-H06
36:23
So doing things like two ways. One is I see. That is my responsible because I had to deliver thing. So text me I see.

IN-HYD-10N-H06
36:49
Are you ok with your approach? So that's what we we need to have a discussions like when you are writing something, so better go with the review, if the approach looks good, we'll go with that like that. If you're not, if you're not we if you are not feeling.

IN-HYD-10N-H06
37:05
Good with that approach, then we'll, we'll come with some other solutions better.

Hidau, Rahul
37:11
Solutions, ok? Yeah, so that's the.

IN-HYD-10N-H06
37:13
Sure so XML.

Hidau, Rahul
37:16
That is fine, right?

IN-HYD-10N-H06
37:18
Yeah, XML one is fine now.

Hidau, Rahul
37:21
Once I will be going through the recording, then I will reach out to you. If I got any confusion, otherwise, I will be trying to understand from my.

IN-HYD-10N-H06
37:29
My end, my end. Okay, so now point here is step three in the XML XL, ok? XML. So step three is I think mostly my my like what I'm thinking here is, this one will work with like the will work on this one. Step three, ok?

IN-HYD-10N-H06
37:50
So independent one, this is not like a dependent one like Rahul has to complete 1st next like not like that. Both you guys can start parallelly, ok? So what will happen here is whenever we got this X XML rate Assume this is XML you are getting it. We need to like how it will be. We need to.

IN-HYD-10N-H06
38:19
Understand this XML this is fixed code, this is not like dynamic thing for this only for this XML this is the scenario. So, so what will happen? E.g., whenever we get the data right, if I see personal.

IN-HYD-10N-H06
38:35
So see here. You see here effective changes there, right? Work status is there is updated, right?

IN-HYD-10N-H06
38:51
With one. So there are like e.g. whereas this work status, we don't have anything. Okay, so I'm trying to understand the try to understand this scenario, ok? So I have different different different what I'm.

IN-HYD-10N-H06
39:13
Workers, ok. So the structure of this, this is the workers level structure. Worker means each worker will represent one employee because each worker will have one employee ID, ok? 1st we'll, we'll drill down this. So I have six workers in my request, means six employees.

IN-HYD-10N-H06
39:31
Having this, data, like I have a data of six employees. Out of which 1st employee, I have three effective changes, ok? For this employee. So what is this effective change here means.

IN-HYD-10N-H06
39:48
See here you see worker status. So they're updating. Worker status they're updating means here you see E added is one, means active means it is in transformation is we have three things. He's updated E added is deleted.

IN-HYD-10N-H06
40:08
Okay, other than this, we are getting any without getting means, e.g., in the worker status, if you are not getting this is updated is active kind of thing, I said that is added, is updated, is deleted, three things will help. See if I show the access D level worker type here.

IN-HYD-10N-H06
40:28
Not on worker type, 1 s, see here these added is deleted priority. Okay.

IN-HYD-10N-H06
40:44
Priority value means old value. We'll get new value, new value old value. So he's updated scenario. So this is boolean simple type, these are data simple types these are like numbered simple type text, simple type kind of thing. Similarly worker type also will have worker summary, right? Worker summary will have complex type.

IN-HYD-10N-H06
41:04
Of sequence of elements these things. So if you show going this one worker summary. After that we have effective date. So inside this effective date, this is effective change, basically change. So in the inside this effective change.

IN-HYD-10N-H06
41:24
If I'll show you this one affect to change, this part, this one, worker status. So where is that worker status? This is the worker status. So what is this thing here is worker status thing is, this is worker status type.

IN-HYD-10N-H06
42:01
Yeah, this is the right? So here if you see here status, these are the elements basically now so what it will represent here.

IN-HYD-10N-H06
42:18
This status is there Status here. So worker status is active, all these things, right? So you see here see the status is active is adding means it's a new employee which is going to add assumption added means new record, we are trying to insert in DB, not from our end, upstreams will do the data.

IN-HYD-10N-H06
42:37
Is update is delete is is added. Okay. See here is updated, right? Okay, so for this for this employee, what is the change here is we are updating the status by adding, by adding. Maybe so then after adding one will be.

IN-HYD-10N-H06
42:59
The output. No, NO NO. We, the question here is the XML will have both kind of data. One is unwanted data, one is which data required to the transformation updated to be updated to be updated. So we need to eliminate those unwanted data.

Boddu, Srikanth
43:18
From the raw XML data. Okay, so unwanted in the sense when in this line number 5455, those don't.

IN-HYD-10N-H06
43:27
Didn't have any that's what, e.g., this is a worker summary. Anyway, it's the primary identifier, so we need to we don't like skip this one. So whereas he here.

IN-HYD-10N-H06
43:40
Effect to change. What will happen here is effective change, this one. Worker status, e.g., nothing is there. Simply we are getting simple data, worker status ok like I'll show you, see even here personal information getting updated, so we requested information data in the transformation. This one is also updated.

IN-HYD-10N-H06
44:00
Communication. This one also updated. This one also insertion. Give me 1 s, I'll show you the record with that. E.g., this is this added, right? This is the file, this is added. Again compensation is added. Plant C is added maybe it's a new employee.

IN-HYD-10N-H06
44:23
We'll go with other employees in here. See effective change, this is here really see here again this is updated ok see here this is a personal information, there is NO update for the personal information, means there is NO change for the personal information here.

IN-HYD-10N-H06
44:40
Understood right? Because it's not with the added, it's not with updated, it's not with edited. So this kind of information don't require any transformation. So what we are doing is we are getting e.g. 10000 lines of XML XML data, so we are compressing that to.

IN-HYD-10N-H06
44:55
What are required data we like for the transformation, we are compressing to that level. Got it? Confusing. Small doubt actually the employees whatever we are selecting from the access D we are not going to select any employees. XSD we are going to select the schema and.

IN-HYD-10N-H06
45:15
In that schema might have multiple employees data one time. In that we'll select the required not required employees, required structures, yeah structures. So in that structure, in that structure, in that structure we are selecting the structures whatever you want, right? So in that we are filtering it, right? Give me some time. So you understood the difference, right? E.g., this is the personal information.

IN-HYD-10N-H06
45:44
Whereas this personal information is updated one, what I mean to say here is if you see, see this is the personal information it it gets the, it is getting tagged with you is updated, means this is required in transformation.

IN-HYD-10N-H06
46:00
Like our processing basically our data should have processing. Whereas other worker worker related information, this personal information not getting updated. So this don't require we know we can skip this entire section because this doesn't have any updated doesn't have anything to do with the transformation because see so our.

IN-HYD-10N-H06
46:20
E.g., this is XML. Upstream upstream needs to process this XML based on this whatever data we are getting it from like e.g. only the required updated data means updated means added deleted, updated. So what will we will extract this XML and we'll only fetch those required data from the XML, that XML required data, right? That required will have some csvs or something text files. So those files will be processed.

IN-HYD-10N-H06
46:54
Understood now the confusing.

Srivastava, Deepanshu
46:57
Okay.

IN-HYD-10N-H06
47:02
So you're getting a thing right? Yes yes. So, so you you will get this as a input for you, ok? This XML has input for you.

IN-HYD-10N-H06
47:14
So this file you have to you have to process and by while processing you need to understand whatever required things which you.

Srivastava, Deepanshu
47:23
Means updated is there means it is required only.

IN-HYD-10N-H06
47:26
Okay. E.g. this doesn't have anything. So you can skip it.

Srivastava, Deepanshu
47:33
If it is having, if this one is having something like updated which has given some attribute.

IN-HYD-10N-H06
47:37
Updated. So, but here one more thing is see this is the parent level in the nested level, so these don't require any changes. Okay. Because this doesn't have anything. So only you have to consider this the one. You need to.

Srivastava, Deepanshu
47:54
We'll read these two.

IN-HYD-10N-H06
47:56
Okay, this address and this.

Srivastava, Deepanshu
48:00
Understood, right? This email also address and I lost you here. I mean you said.

IN-HYD-10N-H06
48:14
You are having this is updated here means this one is required inside this this one we you have two addresses and different different phones and emails. So the point here is you don't, you only require this one because this is having added information.

Srivastava, Deepanshu
48:30
This is already existing.

IN-HYD-10N-H06
48:33
Okay ok so this.

Srivastava, Deepanshu
48:35
One we'll we'll we can describe.

IN-HYD-10N-H06
48:37
No need to check. Okay. So what we are doing is for only for this pecky thing, there are three to four different.

Srivastava, Deepanshu
48:47
All we'll follow this.

IN-HYD-10N-H06
48:49
Okay ok so we'll we'll compress the size of the file before sending to the data studio by removing all this is the hard worded logic.

Srivastava, Deepanshu
48:59
No need to have a configuration kind of thing. Simple.

IN-HYD-10N-H06
49:07
Similarly if you see the key position is added. Is that right? So this one you'll keep.

Srivastava, Deepanshu
49:13
As inside this business side, this job family.

IN-HYD-10N-H06
49:16
So it doesn't have any like any updated organization those things you can skip it.

Srivastava, Deepanshu
49:23
Like this, ok? Unders.

IN-HYD-10N-H06
49:24
Right? Yes, so this is a basics structure, like element structure, ok? Okay. So this.

Srivastava, Deepanshu
49:33
This one you have to process the.

IN-HYD-10N-H06
49:36
Okay, so you will get input as a XML means you can.

IN-HYD-10N-H06
49:43
You place this file in the local file local play place also. So if you go with the.

Srivastava, Deepanshu
49:48
Story story number story right, Jira story.

IN-HYD-10N-H06
49:51
This is the reading XML input story is there one.

Srivastava, Deepanshu
49:54
It is a future link. XML has input. So in this XML you.

IN-HYD-10N-H06
49:58
You see these files.

Srivastava, Deepanshu
50:00
Okay. This is ample.

IN-HYD-10N-H06
50:03
Some of it.

Srivastava, Deepanshu
50:04
Okay ok yeah.

IN-HYD-10N-H06
50:07
So this is the input, this is the input, ok? Next, this is the one I forgot to tell up step four step four step. This is a step three step, there will be one more step four in XML only one enhancement, one enhancement only.

IN-HYD-10N-H06
50:25
Step four, e.g., you need to, like fetch the existing configuration like e.g. here if I say this structure, XML JSON structure, this.

Srivastava, Deepanshu
50:40
This approach, this is what.

IN-HYD-10N-H06
50:42
This is also for you, ok? So this is the structure you are defined. In this structure, you only selected.

IN-HYD-10N-H06
50:48
Only few fields, right? Few sections, like summary section, work order in the work order, you are only taken this work summary effective change inside the only work status. You didn't take other things, assumption. You didn't have so whatever.

Srivastava, Deepanshu
51:06
Things we didn't take in the configuration.

IN-HYD-10N-H06
51:08
We don't pick. Okay. So that also step in the step three, 1st thing we'll identify only updated things and added things and deleted things. In the step four in.

Srivastava, Deepanshu
51:19
In in that also.

IN-HYD-10N-H06
51:20
So if you have any changes. No, NO, doesn't require for our processing. E.g., you didn't set up any fields for the data studio data studio level.

IN-HYD-10N-H06
51:30
What is the user feels having this in this case? No need it because if you go there also, it is not going to do anything. Either it will fail or it will not create a data set so that because already we are doing the same process in step three.

IN-HYD-10N-H06
51:50
Step three. So to do the further process if the data is not needed for the data we'll step three and step four that is fine for me. At least find 1st we'll do both see it's your choice. You want to merge step three and step four at one shot, you can do it. That.

IN-HYD-10N-H06
52:10
The only best solution I don't have any, I don't want to worry about anything but but we need to extract those configurations from the data studio 1st. Then after getting this configuration XML configuration XML configuration compare with the XML structure with this XML data, only pick those required sections.

IN-HYD-10N-H06
52:33
Insider even that inside the required sections also, only pick which are required to update or deleted adding. So by this way what we are doing we are compressing reducing 20000 30000 because they're thinking a perception we are going to get.

Srivastava, Deepanshu
52:51
40 MB file.

IN-HYD-10N-H06
52:53
Okay? Oh.

Srivastava, Deepanshu
52:56
So assume 40 MB file.

IN-HYD-10N-H06
53:02
That's what, if you are using the processing file with all data, so it is not going to work out letter level so.

Srivastava, Deepanshu
53:11
While getting this file for you?

IN-HYD-10N-H06
53:15
Well, like you need to reduce the two MB and three bit. So what.

Srivastava, Deepanshu
53:22
User don't need anything user directly.

IN-HYD-10N-H06
53:23
Dump all those employee values. So we have to understand we have to filter all those things. So that is the thing. If I want to, if I by mistakely deleted a field which I want to update from either you do two things you can do. Either you can add manually from the section starting directly you will get that output file sector there you can find one field two fields.

IN-HYD-10N-H06
53:49
Then if you're making huge changes to the XSD, then directly we import it. If you're adding you want to add one more field, you want to delete one field, so directly deleting yourself. So same as it's the manually it will do. Okay, that is the thing here, ok? So XML part is good, right? There are XML four steps. Step one and two for the.

Srivastava, Deepanshu
54:14
Step three and four for the ok yeah ok.

IN-HYD-10N-H06
54:19
You guys so I what I'll do I'll recreate the stories for you guys like maybe mostly for the so go with this this one, ok? 1990, which is assigned to.

Srivastava, Deepanshu
54:35
Already there with the story, so I'll add the the partials in this, ok?

IN-HYD-10N-H06
54:39
Okay ok fine, next SFG, ok? So SFG, so yesterday only we got to know the final request for the SFG. This is for our gateway. SFG means it's a sterling file gateway. It's a file gateway manager like so.

IN-HYD-10N-H06
55:04
Why? Because, e.g., in the organization you have different, different department, different, different sections, so as in let us take example of any payroll means also it's a document thing only, right? So we'll have different different sections and different different places, right? E.g., if producer is like outsider, like client.

IN-HYD-10N-H06
55:22
Sending a file to ADP, assumption. There is NO gateway middle and middle, ok? He wants to send that file into 20 department locations. So we'll client has to deliver a file for 20 locations, which is not a valid solution like viable solution. So what will happen? We'll have a middleware broker kind of.

IN-HYD-10N-H06
55:42
Thing is a gateway kind of thing. Client will deliver to this gateway. So this gateway will know what other delivery locations which I need to deliver. So this will deliver, that is means I'm So basic thing I'm explaining, don't compare with the product is much, much more bigger than that, ok? Because it's having.

IN-HYD-10N-H06
56:05
Protocol based like lot of protocols will be there in SFG, ok? So that it is going to handle the files, that's it. And if it wants it can deliver the files. Okay, that is the basic idea of SFG, ok? So what will happen here is this board session. Fine, NO issues for this, ok? So I'll take board session for this, ok? So if you guys are not.

IN-HYD-10N-H06
56:38
Not able to hear me, just please raise your voice, ok? Just try to understand the thing, that's it. So what will happen here is we have a tool called SMG.

IN-HYD-10N-H06
57:07
We have a tool called SMG.

Boddu, Srikanth
57:10
So which is nothing but need a video on this video on this.

IN-HYD-10N-H06
57:27
Hey what?

Boddu, Srikanth
57:38
Video work on.

IN-HYD-10N-H06
57:45
Background changes.

Boddu, Srikanth
57:52
Sorry container.

IN-HYD-10N-H06
57:54
And just in case. So.

Boddu, Srikanth
58:07
Okay.

IN-HYD-10N-H06
58:10
Yeah, ok. This one for both both, ok? This is the tool. Okay.

IN-HYD-10N-H06
58:29
Basically file gateway, ok. So this gateway will receive the files, ok? What files we don't know, client files basically. Okay, then we'll get blocked many as much of files, ok? Different different different clients. Assumption, we have client one.

IN-HYD-10N-H06
58:46
Client two, client three, client four, client n. Means our assumption is we have ten clients ok so from here we have one more tool called G box.

IN-HYD-10N-H06
59:03
Okay, so we get files to the SFG. SFG will share files to the G box. So these are my top layer I'm telling you. So one more box will have G box. So this is the box which knows.

IN-HYD-10N-H06
59:19
Means this is if you want to share to the locations, drive locations kind of thing this will help you. So, so our going with the drives thing. So what will you will give our 1st drive means we are proposing.

IN-HYD-10N-H06
59:34
Our 1st drive, ok now FS ADP.com is there, right? FS.something. So what will happen in this in this one, we'll have some folder root folder, ok. Folder, ok?

IN-HYD-10N-H06
59:51
Like this. Inside this SFD folder, we'll have the C one folder, client one, client two, client three, client four, client ten. Naming conventions. Okay.

IN-HYD-10N-H06
1:00:10
This is the same way. So we can ask like whether we can ask like see our our point here is in our data studio level so.

IN-HYD-10N-H06
1:00:23
Each client means one BU, ok. Okay. BU platform data category, right? We have BU platform data category. So each client means one BU. Okay, so problem here is how to identify data category because we need to.

IN-HYD-10N-H06
1:00:39
Hit the requested data category level yes? So what will happen? So e.g., our client one is CSL resumption, ok? So they have created a folder CSL kind of thing ok client one is CS resumption. CSL, this is the.

IN-HYD-10N-H06
1:01:00
This is like Germany ok like so in the file name, ok, based on the file name, so file name will have some kind of type like name naming convention. So files will be sent.

IN-HYD-10N-H06
1:01:21
Client don't know anything, a client will directly dump file into this one. The files, files, one file or multiple file anything, ok? Okay. So what will happen client will dump the file. That file is having some naming pattern ok so there will not be any subfolders here. There will be subfolders I'll tell you, in the C one input, ok?

IN-HYD-10N-H06
1:01:45
One more subfolder exception ok that's it. Maybe if we are they ok with the pick from here itself, this is output. So in this like each client folder will have input folder means where you will get the files.

IN-HYD-10N-H06
1:02:04
Look to process. If that file got failed with validations, so we should not delete file from the source. We'll move this file from the input of the exception. Because this got failed, right? That's why we are going to moving the exception. The validation exception file will be there, right? There are two files. One is source files.

IN-HYD-10N-H06
1:02:23
This exception means we'll push this input file to the exception folder. Same file, same file, because you want to reproduce, right? Duplication Duplication, We'll from here to here because not one file, I'll tell you. Wait.

IN-HYD-10N-H06
1:02:43
So this is the output. This is optional, ok? Because as of my knowledge, they don't, they don't want it this location to pick the files, they'll do different location to pull the files, means from from here, what will happen, e.g..

IN-HYD-10N-H06
1:03:04
This is e.g. this is our example, ok? From here we are going to hit this FPS FPS microservice, right? Okay. So the FPS will do some dbts operations and those things, right?

IN-HYD-10N-H06
1:03:23
Then this deliver the file to different location, share file delivery. Share file location. Share file location. So what will happen, this microservice being pulled up I from the location.

IN-HYD-10N-H06
1:03:41
Okay. Pool means it has to check for all locations. So there will be pooling control for each client. This client may vary 1 h, this client will have every 12 h. This client will have every 15 min. This client will have every half an hour.

IN-HYD-10N-H06
1:03:59
Okay, kind of thing, ok? Each line will have different different pulling times. So we need to establish a connection to understand each folder, like each file folder, like CSL input folder, angent input folder.

IN-HYD-10N-H06
1:04:18
So, we need to have multiple pillars to understand this. So once we got the file from because and one more thing in input at a time we will also ok ok each file will be having that checking items. Each file will be, will be checked.

IN-HYD-10N-H06
1:04:34
In the each file that is it accepted or exception files? Exception only when it fails. The checking will be done for all the ten files, right? So, what will happen from input?

IN-HYD-10N-H06
1:04:51
Okay, assumption, we'll discuss only one file 1st, ok? We'll get one file. So in assumption at at at present as I assume, we are you are going to get only one file for each client level. So the file we have some naming conventions.

IN-HYD-10N-H06
1:05:08
Okay, so e.g. assumption CSL_assumption something, some PD_some new_something like this it will help. So based on this file name, we need to have some mapping with BU.

IN-HYD-10N-H06
1:05:24
Platform. So means don't be going there like always like there will be two things. One is timestamp area, one is fixed area.

IN-HYD-10N-H06
1:05:39
So we'll get fixed directory. Remaining in timestamping dateways, e.g., because they are today's 19 now 18 now. 19 062025_time this is time 00026 something. Like 11 h or something right which will be the 11 h.

IN-HYD-10N-H06
1:05:57
26 kind of like this you'll get the file name, means 1st section, second section, ok? Okay. So by understanding this file name, at least this part starts with the.

IN-HYD-10N-H06
1:06:12
So we'll trigger this data, ok. There is the case, this data request one file to process. There are multiple file processing also there line case. We have multiple places where files we are attaching, right? From UI. This is the 1st step, 1st step.

IN-HYD-10N-H06
1:06:27
So now second step is, we will get multiple files for different data categories with the same data category? See e.g. this is 26, there will be one more file with 30. After 4 s only got it. So this one this one will go with request one, this one will be request two.

IN-HYD-10N-H06
1:06:46
Because this platform request only one file, ok. Got it? That is request one file. Each request one file, ok. These are the same type of files? Two different requests, ok. For the same same client data. So 1st step is for multiple data, multiple files for.

IN-HYD-10N-H06
1:07:10
Multiple files, different requests. Thing is here when once you pick this file or multiple files, you need to have a mechanism that.

IN-HYD-10N-H06
1:07:23
It should not be pulled by other ok you have to log the file. Okay, got it yeah so because e.g. three ports.

IN-HYD-10N-H06
1:07:40
Okay, part one, part two, part three. So at a time, three requests will go right so once it is being used, that has to be locked. Oh, so once you lock message.

IN-HYD-10N-H06
1:07:59
Something will automatically lock once you do some more operation kind of thing, right? It will automatically. So what we can do here is, like, inside this only, we'll move that input to temp.

IN-HYD-10N-H06
1:08:17
Okay, so from time field process understood, right? Once you start moving from here to here, the file is more means the others will not pick. At a time three will not pick one file because we need to have some mechanism to move that file. Once you are moving that tool will not.

IN-HYD-10N-H06
1:08:36
We like pull other things. So we'll we'll find a way ok so this is done, ok? Where are we now? Second step. So one request, two files has come like process.

IN-HYD-10N-H06
1:09:00
Okay. For the same same thing so different different names. So we need to have a little idea thing. Now step three is 1st step is single file, second is one multiple files same same data category.

IN-HYD-10N-H06
1:09:17
Each data request only one file for the process, ok? That is 2nd step. Step three, you'll have ten data category files up, ok? Means new hire, address update, personal informed form update, salary update, something something like you have ten data categories.

IN-HYD-10N-H06
1:09:33
For the same client, same platform. Okay. Got it? So ten has come. So point here is, e.g., we, you need to have a mechanism orderly processing of those data files.

IN-HYD-10N-H06
1:09:49
Okay, so you cannot run until new hire like a personal info onboard is completed, then only you can go with the address update, family info update education info, salary updates, job updates. Okay sequence. Sequence.

IN-HYD-10N-H06
1:10:05
Without entering like because because without having employee ID assumption, how will you onboard remaining things? For this process is there which was BP process is there.

IN-HYD-10N-H06
1:10:20
That processes have BPM internally GPP GPF is there, right? GPF is handling those kind of things. Whereas here NO pointer and so we need to have an order mechanism. E.g..

IN-HYD-10N-H06
1:10:37
What I'll say here, so I'll have some order table, ok? This is order table. So I'll give you sequencing 1234 fives. There is NO guarantee you'll get ten files every time.

IN-HYD-10N-H06
1:10:55
You might have only get three files, you might get only four files, you might get only five files. So one shot, e.g., for one kind of thing, I got this. I got this three and five. So two and four didn't come. So I know order which one has to send 1st.

IN-HYD-10N-H06
1:11:13
Like this. So this is this is the one orderly we have to set the data. Okay. Okay. You might get two batches of data like 20 data things. When we are pulling you found that the particular folder is having 30 files in a short.

IN-HYD-10N-H06
1:11:32
Okay, three different things. Assumption. So what you will do, you will group with the file names, you will get list of files. So what is the order of this file one 1st send this those three. Okay. What it right? If even ten request comes ten like hundred files comes.

IN-HYD-10N-H06
1:11:49
For 1010 requests like 01:10 data categories ten files like different requests, hundred files 1010 requests you got means hundred files. So hundred files comes also, what we'll do, you'll read the directory data, all the files in the directory group, you can group it, right? Simply.

IN-HYD-10N-H06
1:12:08
Yeah, and then sequence. Can you sequence, right? So what we can do in this also, we have one scheduler services there. Okay, so what we will we can do here is that schedulers will put it.

IN-HYD-10N-H06
1:12:24
So I didn't request go to either one of we can control it because here we there is NO handling of like handling of means there is NO, we are not going to handle any file data. So we are only controlling this file data.

IN-HYD-10N-H06
1:12:41
See, because our thing is, we have to give assembly location. Yes? We have to give assembly location, right? From, from that location, our FPS will pick. That this concept is there. So what will We'll get list price.

IN-HYD-10N-H06
1:12:57
Means we'll get the names of device. Yes. We'll sort it, we'll order it for the particular client. So you know which view, which platform will which data category which we you know, platform data is secondary. Platform category will be File names.

IN-HYD-10N-H06
1:13:14
Once you know that what are the categories I need to process, then you can go with the order, right? Sub sub step one step like next steps if you say, ok? Try to understand, ok? Try to understand the concept of how we are going to implement all those things, ok? So if I define all one zero that's onell you can do it. If I define 123.

IN-HYD-10N-H06
1:13:34
Same how we are doing data set processing, 0123 are doing right? Same way in the target fields. Sequence where e.g. A is dependent on B 1st A has to generate it. We are keeping A as a sequence one B as a sequence two. So like that same way. So we will down this point. So this is high level next level, right? We'll dig into each thing, ok? 1st is pulling, we'll get the list of files, not all files, they are not there, the only names of the files.

IN-HYD-10N-H06
1:14:04
So what we will do is before like so what we will move that.

IN-HYD-10N-H06
1:14:20
Transaction level create a unique ID in the time directory, there will push the files because it will move easily. We'll create a request ID, we'll create a request for request ID folder, we will push there. From there will pick. So what will happen it will be removed from here.

IN-HYD-10N-H06
1:14:39
Move to there. So if tomorrow new files comes also NO issues. These are the concept of single files. Concept of multiple files means one data category requires five to 06:10 files N files. If it is a, e.g., if it is that's still in a question pending questions, ok?

IN-HYD-10N-H06
1:15:02
Still we are we are in discussion about multi things. They were saying that at a time we are rolling it one set of data for the data category. Okay ok five files there will be multiple files because if multiple files comes right, which.

IN-HYD-10N-H06
1:15:17
Request, what are the five files for the e.g. my data get the request five files to process the data. I I got ten files. Which five are matches with the for the request one which five are matched for the request. We don't know, right?

IN-HYD-10N-H06
1:15:35
So we don't know. But what is saying that we only get one set of files, like five files, that's it. Okay, good process, so pick all the files, process it.

IN-HYD-10N-H06
1:15:47
Okay. Okay same ok ok ok yeah ok that is the question is there, if there any pattern we can identify because.

IN-HYD-10N-H06
1:16:05
Only as of my knowledge, only differentiating is this timestamp. Because this e.g. one day you are getting ten batch requests like ten to 5510 requests. Date will be same only timestamp will vary. But even each five timestamp, you cannot go in like that, right?

IN-HYD-10N-H06
1:16:24
2627 2820 like that you're getting one 1 s gap file names has created because the loop will exclude within millisecond difference it will go into execute. Yes, so so you cannot predict that which file is matching with other other part of this one. So.

IN-HYD-10N-H06
1:16:42
So that's why there is a one question there. If still there any differentiation we can do, we can do it. Okay, that's it. This is the one little bit tricky. And one more thing is.

IN-HYD-10N-H06
1:17:00
40 MB. Not one file. Enter like either one file will get 40 MB or something. Max. Okay. So we need to increase our.

IN-HYD-10N-H06
1:17:16
Not increase, get file scenario we have to update from SMB like FPS microservice, we have to enhance that get file. Okay. From that location. 40 MB because last time we tried, right? So it is taking some minute more than minute it is taking. It should not take more minutes.

Boddu, Srikanth
1:17:44
Okay, how FPS gets called in this scenario? Is it like a push from.

IN-HYD-10N-H06
1:17:49
When we will call like in our.

Boddu, Srikanth
1:17:52
What are the changes? Delivering TFS drive is fine, but we should get that.

IN-HYD-10N-H06
1:18:00
I mean unique ID and then the location and all.

Boddu, Srikanth
1:18:02
Right, that is we are going to create.

IN-HYD-10N-H06
1:18:06
So we are going to call, ok. We are going.

Boddu, Srikanth
1:18:10
To create a request for that one micros.

IN-HYD-10N-H06
1:18:18
There is NO space called and then yes.

Boddu, Srikanth
1:18:23
We'll have one more service file puller service.

IN-HYD-10N-H06
1:18:27
Okay.

Boddu, Srikanth
1:18:29
As a separate tool, it's a different tool. So I put mana.

Boddu, Srikanth
1:18:41
Oh.

IN-HYD-10N-H06
1:18:41
Okay yeah that's it guys. I'm stopping the recording.


_____________________
Step 1: Processing XSD to Generate Tree Structures for UI
The first step requires developing a system to process an uploaded XSD file and generate a hierarchical tree structure for display in 
the User Interface (UI), enabling users to select specific schema elements for further processing. 
The process begins with the user uploading an XSD file through the UI, which defines the structure of XML data, 
including elements like worker, worker_summary, and effective_changes. 
The system must parse the XSD to extract its structure and create a tree-like representation 
with nodes (e.g., checkboxes and expandable sections) that reflect the schema’s hierarchy. 
This tree structure is sent back to the UI via an API for display, allowing users to select or 
deselect nodes (e.g., fields like worker_status) to specify which parts of the schema are required. 
The selected nodes are then returned to the system for further processing, such as generating column relations. 
Key steps include:
1.Receive XSD Upload: Accept the XSD file uploaded via the UI.
2.Parse XSD: Use a parser (e.g., XML schema parser library) to analyze the XSD and extract its elements and attributes.
3.Generate Tree Structure: Create a hierarchical representation of the schema with nodes for each element, 
including checkboxes and expandable sections.
4.Send to UI via API: Return the tree structure to the UI through an API for display.
5.Handle User Selections: Receive the user-selected nodes from the UI for downstream processing.



Step 2: Handling Updates to XSD
The second step involves supporting updates to an existing XSD configuration when a user uploads a modified or new XSD, 
ensuring that existing validation and transformation rules are preserved where possible. When a new XSD is uploaded, 
the system compares it with the stored configuration to identify changes, such as added or deleted fields or modified structures. 
The updated structure is displayed in the UI, showing previously selected nodes and highlighting new or removed elements, 
allowing users to add or remove sections. The system must maintain existing rules for unchanged fields to avoid losing configurations, 
updating only the affected fields in the database (e.g., marking deleted fields with a “delete” status). 
If the comparison is too complex, recreating the entire structure is an option, but this risks losing rules, 
so a mechanism for incremental updates is preferred. Key steps include:

Receive Updated XSD: Accept the new or modified XSD uploaded via the UI.
Compare with Existing Configuration: Analyze the new XSD against the stored configuration to identify additions, deletions, or modifications.
Update UI Display: Show the updated tree structure in the UI, highlighting existing selections and new/deleted elements.
Process User Modifications: Allow users to add or remove sections and save the updated selections.
Update Database: Store changes in the database, preserving validation/transformation rules for unchanged fields and marking deletions with a “delete” status.

________________________________________________________
### **New Feature: XSD Processing for XML Generation**

#### **Step 1: Initial XSD Processing**

1. **Upload XSD File**: User uploads XML Schema Definition file via UI
2. **Parse XSD**: System analyzes XSD structure and extracts all elements/attributes
3. **Generate Tree Structure**: Create hierarchical tree view with checkboxes for element selection
4. **User Selection**: User selects required elements from the tree structure
5. **Generate Configuration**:

1. Create column relations for selected elements
2. Generate UUIDs for each column
3. Save configuration to database
4. Create JSON template for XML generation





#### **Step 2: Update Existing XSD Configuration**

1. **Upload Updated XSD**: User uploads modified XSD file
2. **Compare Structures**: System compares existing vs new XSD structure
3. **Identify Changes**: Detect additions, deletions, and modifications
4. **Preserve Rules**: Maintain existing validation/transformation rules for unchanged elements
5. **Update Configuration**:

1. Add new elements
2. Mark deleted elements as inactive (don't delete to preserve rules)
3. Update modified elements





#### **Technical Challenges to Address**

1. **XSD Parsing**: Handle complex XSD files (3000+ lines) with nested structures
2. **Tree Generation**: Create UI-friendly tree structure from XSD elements
3. **Configuration Management**: Generate column relations and JSON templates
4. **Update Logic**: Smart comparison to preserve existing business rules
5. **Integration**: Fit into existing file processing pipeline


#### **Expected Deliverables**

1. XSD parser service
2. Tree structure generator
3. Column relation generator
4. JSON template generator for XML output
5. Update/comparison logic for XSD changes
6. Integration with existing UI and processing pipeline




















The requirements for the File Processing Service are as follows:

1. **XSD Parsing and Tree Structure Generation:**

1. Implement a service to parse complex XSD files.
2. Generate a hierarchical tree structure for UI display, enabling users to select specific nodes.



2. **Column Relation Generation and Storage:**

1. Generate unique column relations (UUIDs) based on user-selected nodes.
2. Store these column relations in a database.



3. **JSON Template Generation:**

1. Create JSON templates for XML processing based on the selected nodes and their column relations.



4. **Update Handling:**

1. Implement logic to compare updated XSD structures with existing configurations.
2. Identify additions and deletions of elements in the XSD.
3. Preserve existing validation and transformation rules during updates, avoiding data loss.



5. **UI Interaction:**

1. Provide APIs for the UI to:

1. Receive XSD files and return the corresponding tree structure.
2. Receive user-selected nodes from the tree structure.
3. Provide the generated JSON template.